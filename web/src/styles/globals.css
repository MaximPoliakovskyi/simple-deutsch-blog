/* biome-disable */
/* Tailwind (v4) + plugins */
/* biome-disable-file lint/suspicious/noUnknownAtRules */
/* biome-disable-file lint/complexity/noImportantStyles */
/*
  The project intentionally uses Tailwind v4 plugin directives (@plugin, @custom-variant)
  and a few `!important` rules used for resets or reduced-motion fallbacks. These are
  deliberate and documented. Disable the specific Biome rules for this file.
*/
/* biome-disable lint/suspicious/noUnknownAtRules */
/* biome-disable lint/complexity/noImportantStyles */
@import "tailwindcss";
/* The following at-rules are Tailwind v4 plugin/custom directives used intentionally.
  Linters may not recognize them; they are required for the project's Tailwind setup. */
/* Reason: This project uses Tailwind v4 plugin directives ("@plugin", "@custom-variant")
  and a small set of intentional `!important` rules for accessibility/resets. These
  are deliberate, documented, and should be allowed. If preferred, we can instead add
  a biome config override to whitelist these at-rules globally. */
/* biome-disable-next-line lint/suspicious/noUnknownAtRules */
@plugin "@tailwindcss/typography";

/* Make `dark:` utilities activate when `.dark` is on <html> */
/* Tailwind custom variant to activate dark utilities on .dark on <html>. Intentional. */
/* biome-disable-next-line lint/suspicious/noUnknownAtRules */
@custom-variant dark (&:where(.dark, .dark *));

/* ── Design tokens ────────────────────────────────────────────────────────── */
:root {
  /* Hue/Sat/Light tokens for easy theming with hsl() */
  --brand: 222 47% 11%;
  --fg: 222 22% 12%;
  --muted: 222 8% 45%;
  --bg: 0 0% 100%;
  --radius: 12px;

  /* Accent used for focus rings, etc. */
  --sd-accent: hsl(222 80% 56%);

  /* Spacing scale (optional helpers) */
  --space-1: 0.25rem;
  --space-2: 0.5rem;
  --space-3: 0.75rem;
  --space-4: 1rem;

  /* Back-compat aliases (mapped to new tokens) */
  --sd-bg: hsl(var(--bg));
  --sd-fg: hsl(var(--fg));

  /* Card / surface token used for small UI surfaces like the TOC and promo card */
  --sd-card-bg: hsl(0 0% 98%); /* very light surface */
  /* Subtle accent gradient used on small cards (promo/TOC) */
  --sd-card-grad-start: rgba(94, 92, 230, 0.07); /* soft bluish-lavender */
  --sd-card-grad-end: rgba(94, 92, 230, 0.02);

  /* Let UA know we support dark + light native controls */
  color-scheme: light dark;
}

/* Dark theme token overrides applied when `.dark` is on <html> */
html.dark {
  --bg: 222 47% 8%;
  --fg: 210 15% 96%;
  --muted: 220 9% 65%;

  /* Card surface in dark mode: subtle translucent surface */
  --sd-card-bg: rgb(255 255 255 / 3%);
  --sd-card-grad-start: rgba(255,255,255,0.02);
  --sd-card-grad-end: rgba(255,255,255,0.0);
}

/* Infection overlay: controlled by theme-infect + theme-infect-active classes */
html.theme-infect {
  --infect-x: 50%;
  --infect-y: 50%;
  --infect-color-start: rgba(6,12,24,0.95);
  --infect-color-end: rgba(20,30,50,0.7);
}

/* The ::before pseudo element expands from a small circle to cover the viewport.
   We use transform scale to animate performance-friendly and coordinate origin
   with CSS variables set by JS. */
html.theme-infect::before {
  content: "";
  position: fixed;
  inset: 0;
  pointer-events: none;
  z-index: 9999;
  background: radial-gradient(circle at var(--infect-x) var(--infect-y), var(--infect-color-start) 0%, var(--infect-color-end) 55%, transparent 60%);
  opacity: 0;
  transform-origin: var(--infect-x) var(--infect-y);
  transform: scale(0.001);
  transition: transform 500ms cubic-bezier(.2,.9,.2,1), opacity 300ms linear;
}

html.theme-infect.theme-infect-active::before {
  transform: scale(1);
  opacity: 1;
}

/* The theme-transition class briefly animates token color changes */
html.theme-transition {
  transition: background-color 300ms cubic-bezier(.2,.9,.2,1), color 300ms cubic-bezier(.2,.9,.2,1);
}

/* Reveal overlay: controlled by theme-reveal + theme-reveal-active classes */
html.theme-reveal {
  --reveal-x: 50%;
  --reveal-y: 50%;
  --reveal-color-start: rgba(6,12,24,0.95);
  --reveal-color-end: rgba(20,30,50,0.7);
}

html.theme-reveal::before {
  content: "";
  position: fixed;
  inset: 0;
  pointer-events: none;
  z-index: 9999;
  background: radial-gradient(circle at var(--reveal-x) var(--reveal-y), var(--reveal-color-start) 0%, var(--reveal-color-end) 55%, transparent 65%);
  opacity: 0;
  transform-origin: var(--reveal-x) var(--reveal-y);
  transform: scale(0.001);
  transition: transform 420ms cubic-bezier(.2,.9,.2,1), opacity 300ms linear;
}

html.theme-reveal.theme-reveal-active::before {
  transform: scale(1);
  opacity: 1;
}

@media (prefers-reduced-motion: reduce) {
  html.theme-reveal::before,
  html.theme-reveal.theme-reveal-active::before {
    transition: none;
    transform: none;
    opacity: 1;
  }
}

/* Accessible focus baseline */
:focus-visible {
  outline: 2px solid var(--sd-accent);
  outline-offset: 2px;
  border-radius: 6px;
}

/* Content container helper */
.container-content {
  margin-inline: auto;
  padding-inline: clamp(1rem, 4vw, 2rem);
  @media (min-width: 40rem) {
    max-width: 65ch;
  }
}

/* ── Typography (Prose) tweaks ───────────────────────────────────────────── */
.prose {
  --tw-prose-images-margin-top: 1.25em;
  --tw-prose-images-margin-bottom: 1.25em;
}
.prose.max-w-none {
  max-width: none;
}
.prose :where(img):not(:where([class~="not-prose"] *)) {
  border-radius: 0.75rem;
  height: auto;
  max-width: 100%;
}
.prose :where(pre code) {
  white-space: pre-wrap;
  overflow-wrap: anywhere;
}
.prose :where(table) {
  display: block;
  max-width: 100%;
  overflow-x: auto;
  -webkit-overflow-scrolling: touch;
  border-radius: var(--radius);
}
.prose :where(blockquote) {
  border-inline-start: 4px solid hsl(var(--muted));
  padding-inline-start: 1em;
  color: hsl(var(--muted));
}
.prose :where(figure, pre, table) {
  border-radius: var(--radius);
}
.prose :where(a):focus-visible {
  outline: 2px solid hsl(var(--brand));
  outline-offset: 2px;
  border-radius: 4px;
}

/* Reduce motion */
@media (prefers-reduced-motion: reduce) {
  * {
    /* biome-disable-next-line lint/complexity/noImportantStyles */
    animation-duration: 0.01ms !important;
    /* biome-disable-next-line lint/complexity/noImportantStyles */
    animation-iteration-count: 1 !important;
    /* biome-disable-next-line lint/complexity/noImportantStyles */
    transition-duration: 0.01ms !important;
    /* biome-disable-next-line lint/complexity/noImportantStyles */
    scroll-behavior: auto !important;
  }
}

/* ── WordPress / Gutenberg alignment helpers ──────────────────────────────── */
.prose :where(.alignwide) {
  margin-inline: calc(50% - min(50%, 48rem));
  max-width: 96rem;
  width: auto;
}
.prose :where(.alignfull) {
  width: 100vw;
  max-width: 100vw;
  margin-left: 50%;
  transform: translateX(-50%);
}

/* ── Responsive embeds ───────────────────────────────────────────────────── */
.embed {
  position: relative;
  width: 100%;
  aspect-ratio: 16 / 9;
  background: color-mix(in hsl, hsl(var(--fg)) 8%, transparent);
  border-radius: var(--radius);
}
.embed > iframe,
.embed > video {
  position: absolute;
  inset: 0;
  width: 100%;
  height: 100%;
  border: 0;
  border-radius: inherit;
}

/* Reusable small-surface card helper matching the Table of Contents look.
   Use this on small UI surfaces (TOC, promo card) to get the same bg + subtle border + rounding.
   Keep shadows applied by utility classes (shadow-sm / shadow-lg) so we don't override them. */
.sd-card {
  position: relative;
  overflow: hidden; /* contain the gradient pseudo-element */
  background-color: color-mix(in srgb, var(--sd-card-bg) 100%, transparent);
  border: none; /* removed subtle border per request */
  border-radius: 1rem; /* matches rounded-xl-ish curvature */
}

/* Bottom subtle gradient glow for cards. Uses CSS variables so it's tweakable. */
.sd-card::after {
  content: "";
  position: absolute;
  left: 0;
  right: 0;
  bottom: 0;
  height: 40%;
  pointer-events: none;
  background: radial-gradient( at 50% 100%, var(--sd-card-grad-start), var(--sd-card-grad-end) 60%, transparent 75% );
}
@supports not (aspect-ratio: 1) {
  .embed {
    padding-bottom: 56.25%;
    height: 0;
  }
}

/* ── Utility polish ──────────────────────────────────────────────────────── */
html,
body {
  background-color: hsl(var(--bg));
}

/* ✅ Next.js-compliant smooth scrolling */
html[data-scroll-behavior="smooth"] {
  scroll-behavior: smooth;
}
@media (prefers-reduced-motion: reduce) {
  html[data-scroll-behavior="smooth"] {
    scroll-behavior: auto;
  }
}

/* Input: remove Safari search halo */
input[type="search"] {
  appearance: none;
  -webkit-appearance: none;
}
input[type="search"]:focus {
  /* biome-disable-next-line lint/complexity/noImportantStyles */
  outline: none !important;
  /* biome-disable-next-line lint/complexity/noImportantStyles */
  box-shadow: none !important;
}
input[type="search"]::-webkit-search-decoration,
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-results-button,
input[type="search"]::-webkit-search-results-decoration {
  display: none;
}

/* ── Preloader styles ───────────────────────────────────────────────────── */
.sd-preloader-hidden {
  opacity: 0;
  visibility: hidden;
  pointer-events: none;
  transition:
    opacity 500ms ease,
    visibility 500ms ease;
}

/* Center content precisely in viewport */
#sd-preloader {
  position: fixed;
  inset: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 99999;
  /* Use a theme-aware overlay that matches the user's preference even
     before JavaScript runs. The overlay uses background tokens but adds a
     subtle tint for contrast. */
  background: hsl(var(--bg));
  background-image: linear-gradient(rgba(0,0,0,0.02), rgba(0,0,0,0.02));
}

/* Prefer explicit contrast for light/dark schemes before JS runs */
@media (prefers-color-scheme: dark) {
  #sd-preloader {
    background: hsl(var(--bg));
    background-image: linear-gradient(rgba(255,255,255,0.02), rgba(255,255,255,0.02));
  }
}

/* (Old infection overlay removed in favor of the simpler reveal overlay above.) */

/* No spinner — only flipping text */

.sd-preloader-word {
  font-weight: 800;
  font-size: 1.5rem;
  letter-spacing: 0.01em;
  color: hsl(var(--fg));
  transition:
    opacity 250ms ease,
    transform 250ms ease;
  text-align: center;
}

/* --- CSS-only rotator (server rendered) --- */
.sd-rotator {
  display: inline-block;
  position: relative;
  height: 1.5rem;
  overflow: hidden;
}
.sd-rotator-word {
  display: block;
  position: absolute;
  left: 0;
  right: 0;
  opacity: 0;
  transform: translateY(100%);
  animation: sd-rotator 24s linear infinite;
}
.sd-rotator-word:nth-child(1) { animation-delay: 0s; }
.sd-rotator-word:nth-child(2) { animation-delay: 5s; }
.sd-rotator-word:nth-child(3) { animation-delay: 10s; }
.sd-rotator-word:nth-child(4) { animation-delay: 15s; }
.sd-rotator-word:nth-child(5) { animation-delay: 20s; }
.sd-rotator-word:nth-child(6) { animation-delay: 25s; }
.sd-rotator-word:nth-child(7) { animation-delay: 30s; }
.sd-rotator-word:nth-child(8) { animation-delay: 35s; }

@keyframes sd-rotator {
  0% { opacity: 0; transform: translateY(100%); }
  3% { opacity: 1; transform: translateY(0%); }
  80% { opacity: 1; transform: translateY(0%); }
  85% { opacity: 0; transform: translateY(-100%); }
  100% { opacity: 0; transform: translateY(-100%); }
}

.sd-hidden { display: none !important; }

/* JS flipper visibility toggles */
.sd-js-hidden { display: none; }
.sd-js-active { display: inline-flex; }

/* On dark backgrounds, invert the word color for better contrast if needed */
html.dark #sd-preloader .sd-preloader-word {
  color: hsl(var(--fg));
}

/* Flip animation */
.sd-preloader-word {
  backface-visibility: hidden;
  transform-origin: center;
}
.sd-word-flip {
  animation: sd-flip 400ms ease-in-out;
}

@keyframes sd-flip {
  0% {
    transform: rotateX(0deg);
    opacity: 1;
  }
  50% {
    transform: rotateX(90deg);
    opacity: 0.2;
  }
  100% {
    transform: rotateX(0deg);
    opacity: 1;
  }
}

/* Per-letter flip setup */
.sd-preloader-word {
  display: inline-flex;
  gap: 0.02em;
  perspective: 600px;
}
.sd-letter {
  display: inline-block;
  transform-origin: center;
  backface-visibility: hidden;
  transition:
    transform 360ms ease,
    opacity 360ms ease;
  will-change: transform, opacity;
}

.sd-letter.flipping {
  transform: rotateX(90deg);
  opacity: 0.2;
}

/* When the letter changes, JS replaces text; to create a flip effect we briefly
   set transform to rotateX(90deg) and fade, then back to 0deg. Since JS updates the
   character at mid-flip, the visual is a flipping letter. The timeouts in the
   component coordinate this. */

.sd-word-fade {
  opacity: 0.2;
  transform: translateY(-6px) scale(0.98);
}

@media (prefers-reduced-motion: reduce) {
  .sd-letter {
    /* biome-disable-next-line lint/complexity/noImportantStyles */
    transition: none !important;
  }
  .sd-preloader-word {
    /* biome-disable-next-line lint/complexity/noImportantStyles */
    transition: none !important;
  }
}
